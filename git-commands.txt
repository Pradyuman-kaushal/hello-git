1) git init:This command turns a directory into an empty Git repository.
   syntax:$ git init
2) git add:Adds files in the to the staging area for Git. Before a file is available to commit to a repository, the file needs to be added to the Git index (staging area).
   syntax:$ git add <file or directory name>
3) git commit:Record the changes made to the files to a local repository. For easy reference, each commit has a unique ID.
   syntax:$ git commit -m "Commit message in quotes"
4) git status:This command returns the current state of the repository.
   syntax:$ git status.
5) git config:git config is how to assign these settings. 
   syntax:$ git config <setting> <command>.
	  $ git config --global user.email "my@emailaddress.com"
	  $ git config --global user.name "Brian Kerr"
6) git remote:To connect a local repository with a remote repository. A remote repository can have a name set to avoid having to remember the URL of the repository.
   syntax:$ git remote <command> <remote_name> <remote_URL>
7) git clone:To create a local working copy of an existing remote repository, use git clone to copy and download the repository to a computer. 
   syntax:$ git clone <remote_URL>
8) git pull:To get the latest version of a repository run git pull. This pulls the changes from the remote repository to the local computer.
   syntax:$ git pull <branch_name> <remote_URL/remote_name>
9) git push:Sends local commits to the remote repository. git push requires two parameters: the remote repository and the branch that the push is for.
   syntax:$ git push <remote_URL/remote_name> <branch>
10) git log:To show the chronological commit history for a repository. This helps give context and history for a repository. git log is available immediately on a recently cloned repository to see history.
    syntax:$ git log
